<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="test__my__class_8cpp" kind="file" language="C++">
    <compoundname>test_my_class.cpp</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iostream</includes>
    <includes refid="my__class_8h" local="yes">my_class.h</includes>
    <includes refid="test__my__class_8hpp" local="yes">test_my_class.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>my_class.h</label>
        <link refid="my__class_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>test_my_class.cpp</label>
        <link refid="test__my__class_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>test_my_class.hpp</label>
        <link refid="test__my__class_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>limits</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__my__class_8cpp_1a525335710b53cb064ca56b936120431e" prot="public" static="no">
        <name>_USE_MATH_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="9" column="9" bodyfile="test_my_class.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" prot="public" static="no">
        <name>IS_TRUE</name>
        <param><defname>x</defname></param>
        <initializer>{if(!(x)) std::cout&lt;&lt;__FUNCTION__&lt;&lt;&quot; failed on line &quot;&lt;&lt;__LINE__&lt;&lt;std::endl;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="11" column="9" bodyfile="test_my_class.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a97c24a136dc8132fefff4fc8dde6d1c9" prot="public" static="no">
        <name>TEST_CLASS_POSITIVE_DOUBLE</name>
        <initializer>(M_PI)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="13" column="9" bodyfile="test_my_class.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1ad2994a78569917b8170028fb5cf19d47" prot="public" static="no">
        <name>TEST_CLASS_NEGATIVE_DOUBLE</name>
        <initializer>(-M_PI)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="14" column="9" bodyfile="test_my_class.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1ab855b8c59d654e7ef48e07cdd9ff8c77" prot="public" static="no">
        <name>TEST_CLASS_POSITIVE_FLOAT</name>
        <initializer>(5.5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="16" column="9" bodyfile="test_my_class.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a1e43356f8390fbf53adf28e6d8ea32e1" prot="public" static="no">
        <name>TEST_CLASS_NEGATIVE_FLOAT</name>
        <initializer>(-3.5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="17" column="9" bodyfile="test_my_class.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a4543514127209ca87261a34e523e6184" prot="public" static="no">
        <name>TEST_CLASS_BIG_POSITIVE_FLOAT</name>
        <initializer>(14.3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="18" column="9" bodyfile="test_my_class.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" prot="public" static="no">
        <name>TEST_CLASS_POSITIVE_INT</name>
        <initializer>(6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="20" column="9" bodyfile="test_my_class.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a8d4311a74377b01718a34f01d9abff5a" prot="public" static="no">
        <name>TEST_CLASS_NEGATIVE_INT</name>
        <initializer>(-4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="21" column="9" bodyfile="test_my_class.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a21b8cfa5a18537c6aef7708e2a9e6487" prot="public" static="no">
        <name>TEST_CLASS_NOT_THAT_LARGE_POS_INT</name>
        <initializer>(31650)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="23" column="9" bodyfile="test_my_class.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1ab32e1cdc7c0f819a550949197a24c927" prot="public" static="no">
        <name>TEST_CLASS_NOT_THAT_LARGE_NEGATIVE_INT</name>
        <initializer>(-31650)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="24" column="9" bodyfile="test_my_class.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1aa346b938ba595340170d82adb6728c5c" prot="public" static="no">
        <name>TEST_CLASS_LARGE_POSITIVE_INT</name>
        <initializer>(std::numeric_limits&lt;int&gt;::max())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="26" column="9" bodyfile="test_my_class.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a499b5f8b1de5adf6c8f5dcfc4e029e78" prot="public" static="no">
        <name>TEST_CLASS_LARGE_NEGATIVE_INT</name>
        <initializer>(std::numeric_limits&lt;int&gt;::min())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="27" column="9" bodyfile="test_my_class.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a84adeb82ceca95387cc5ed5f36e83a0d" prot="public" static="no">
        <name>TEST_CLASS_UNSIGNED_LONG_LONG_INT</name>
        <initializer>(std::numeric_limits&lt;unsigned long long int&gt;::max())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="29" column="9" bodyfile="test_my_class.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a2336ba2a2f2284aa6bede29ef76ade9e" prot="public" static="no">
        <name>TEST_CLASS_LONG_LONG_INT_NEGATIVE</name>
        <initializer>(std::numeric_limits&lt;long long int&gt;::min())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="30" column="9" bodyfile="test_my_class.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1ae4f2604a8d4d27c8777eb73888962f20" prot="public" static="no">
        <name>TEST_CLASS_INVALID_STRING</name>
        <initializer>(&quot;I AM @ very Long NAmE&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="32" column="9" bodyfile="test_my_class.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a722bf56e11fd344438ab4facc3990c84" prot="public" static="no">
        <name>TEST_CLASS_VALID_STRING_DASH</name>
        <initializer>(&quot;Anna-Maria Toneva&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="33" column="9" bodyfile="test_my_class.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" prot="public" static="no">
        <name>TEST_CLASS_VALID_STRING</name>
        <initializer>(&quot;Veselina Velkova&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="34" column="9" bodyfile="test_my_class.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a0e0c5bcf70aa9ea616f1743de4dea049" prot="public" static="no">
        <name>TEST_CLASS_CHAR_LETTER</name>
        <initializer>(&apos;A&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="36" column="9" bodyfile="test_my_class.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1a6d0027f40f01caacde7c235656bffecb" prot="public" static="no">
        <name>TEST_CLASS_CHAR_NUMBER</name>
        <initializer>(&apos;5&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="37" column="9" bodyfile="test_my_class.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__my__class_8cpp_1ada700fb90c41c3eac4ba7f68231de9b9" prot="public" static="no">
        <name>TEST_CLASS_CHAR_SYMBOL</name>
        <initializer>(&apos;@&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="38" column="9" bodyfile="test_my_class.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__my__class_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test_my_class.cpp" line="859" column="5" bodyfile="test_my_class.cpp" bodystart="859" bodyend="873"/>
        <references refid="class_test_class_1a160cc248df643477304eea8252339e17" compoundref="test__my__class_8cpp" startline="517" endline="529">TestClass::test_addNewGrade</references>
        <references refid="class_test_class_1a3e5dd2e82e2205841f63f2a822c749b8" compoundref="test__my__class_8cpp" startline="603" endline="615">TestClass::test_getAverageGrade</references>
        <references refid="class_test_class_1a38edab9e106cf75180805eb092feb9c5" compoundref="test__my__class_8cpp" startline="809" endline="821">TestClass::test_getGrades</references>
        <references refid="class_test_class_1acb6a86dccf2a6b72de6984a50fa815c5" compoundref="test__my__class_8cpp" startline="691" endline="703">TestClass::test_getMaxGrade</references>
        <references refid="class_test_class_1ac5ae467fa892e345b59517b7be11741b" compoundref="test__my__class_8cpp" startline="756" endline="768">TestClass::test_getMinGrade</references>
        <references refid="class_test_class_1afb9755c703e20757d036f2f704515392" compoundref="test__my__class_8cpp" startline="278" endline="290">TestClass::test_getName</references>
        <references refid="class_test_class_1ac7022e0ec096e0c93103acde04be3c74" compoundref="test__my__class_8cpp" startline="48" endline="60">TestClass::test_getNumber</references>
        <references refid="class_test_class_1aafc888ca6e42adec762d1419507962e6" compoundref="test__my__class_8cpp" startline="453" endline="465">TestClass::test_setName</references>
        <references refid="class_test_class_1a4f999d196c8a0aa5da1e3f16d4b773ea" compoundref="test__my__class_8cpp" startline="347" endline="359">TestClass::test_setNumber</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="my__class_8h" kindref="compound">my_class.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="test__my__class_8hpp" kindref="compound">test_my_class.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="test__my__class_8cpp_1a525335710b53cb064ca56b936120431e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_TRUE(x)<sp/>{if(!(x))<sp/>std::cout&lt;&lt;__FUNCTION__&lt;&lt;&quot;<sp/>failed<sp/>on<sp/>line<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;__LINE__&lt;&lt;std::endl;}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="test__my__class_8cpp_1a97c24a136dc8132fefff4fc8dde6d1c9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_POSITIVE_DOUBLE<sp/>(M_PI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="test__my__class_8cpp_1ad2994a78569917b8170028fb5cf19d47" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_NEGATIVE_DOUBLE<sp/>(-M_PI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="test__my__class_8cpp_1ab855b8c59d654e7ef48e07cdd9ff8c77" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_POSITIVE_FLOAT<sp/>(5.5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="test__my__class_8cpp_1a1e43356f8390fbf53adf28e6d8ea32e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_NEGATIVE_FLOAT<sp/>(-3.5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="test__my__class_8cpp_1a4543514127209ca87261a34e523e6184" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_BIG_POSITIVE_FLOAT<sp/>(14.3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_POSITIVE_INT<sp/>(6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="test__my__class_8cpp_1a8d4311a74377b01718a34f01d9abff5a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_NEGATIVE_INT<sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="test__my__class_8cpp_1a21b8cfa5a18537c6aef7708e2a9e6487" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_NOT_THAT_LARGE_POS_INT<sp/>(31650)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="test__my__class_8cpp_1ab32e1cdc7c0f819a550949197a24c927" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_NOT_THAT_LARGE_NEGATIVE_INT<sp/>(-31650)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="test__my__class_8cpp_1aa346b938ba595340170d82adb6728c5c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_LARGE_POSITIVE_INT<sp/>(std::numeric_limits&lt;int&gt;::max())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="test__my__class_8cpp_1a499b5f8b1de5adf6c8f5dcfc4e029e78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_LARGE_NEGATIVE_INT<sp/>(std::numeric_limits&lt;int&gt;::min())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="test__my__class_8cpp_1a84adeb82ceca95387cc5ed5f36e83a0d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_UNSIGNED_LONG_LONG_INT<sp/>(std::numeric_limits&lt;unsigned<sp/>long<sp/>long<sp/>int&gt;::max())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="test__my__class_8cpp_1a2336ba2a2f2284aa6bede29ef76ade9e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_LONG_LONG_INT_NEGATIVE<sp/>(std::numeric_limits&lt;long<sp/>long<sp/>int&gt;::min())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="test__my__class_8cpp_1ae4f2604a8d4d27c8777eb73888962f20" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_INVALID_STRING<sp/>(&quot;I<sp/>AM<sp/>@<sp/>very<sp/>Long<sp/>NAmE&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33" refid="test__my__class_8cpp_1a722bf56e11fd344438ab4facc3990c84" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_VALID_STRING_DASH<sp/>(&quot;Anna-Maria<sp/>Toneva&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34" refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_VALID_STRING<sp/>(&quot;Veselina<sp/>Velkova&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="test__my__class_8cpp_1a0e0c5bcf70aa9ea616f1743de4dea049" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_CHAR_LETTER<sp/>(&apos;A&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="test__my__class_8cpp_1a6d0027f40f01caacde7c235656bffecb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_CHAR_NUMBER<sp/>(&apos;5&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="test__my__class_8cpp_1ada700fb90c41c3eac4ba7f68231de9b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CLASS_CHAR_SYMBOL<sp/>(&apos;@&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="class_test_class_1a09903432ed60c7c38f1beccc4cf18987" refkind="member"><highlight class="normal"><ref refid="class_test_class_1a09903432ed60c7c38f1beccc4cf18987" kindref="member">TestClass::TestClass</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/>grades.reserve(<ref refid="my__class_8h_1acfe807b192670afc370c3385f235d02e" kindref="member">MIN_GRADES</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>Class<sp/>Default<sp/>Constructor<sp/>Created.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_test_class_1ac7022e0ec096e0c93103acde04be3c74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_getNumber()</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::getNumber()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/>test_valid_getNumber();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>test_invalid_getNumber();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_test_class_1aeccdc78fdf91ccc1ff2e49ed312a17c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_getNumber()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Without<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Without<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a8d4311a74377b01718a34f01d9abff5a" kindref="member">TEST_CLASS_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Without<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Large<sp/>positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a21b8cfa5a18537c6aef7708e2a9e6487" kindref="member">TEST_CLASS_NOT_THAT_LARGE_POS_INT</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Without<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Large<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1ab32e1cdc7c0f819a550949197a24c927" kindref="member">TEST_CLASS_NOT_THAT_LARGE_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Without<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Corner<sp/>case<sp/>large<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a499b5f8b1de5adf6c8f5dcfc4e029e78" kindref="member">TEST_CLASS_LARGE_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Without<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Corner<sp/>case<sp/>large<sp/>positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1aa346b938ba595340170d82adb6728c5c" kindref="member">TEST_CLASS_LARGE_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>name.clear();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1a722bf56e11fd344438ab4facc3990c84" kindref="member">TEST_CLASS_VALID_STRING_DASH</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>With<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>With<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a8d4311a74377b01718a34f01d9abff5a" kindref="member">TEST_CLASS_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>With<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Large<sp/>positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a21b8cfa5a18537c6aef7708e2a9e6487" kindref="member">TEST_CLASS_NOT_THAT_LARGE_POS_INT</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>With<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Large<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1ab32e1cdc7c0f819a550949197a24c927" kindref="member">TEST_CLASS_NOT_THAT_LARGE_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>With<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Corner<sp/>case<sp/>large<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a499b5f8b1de5adf6c8f5dcfc4e029e78" kindref="member">TEST_CLASS_LARGE_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>With<sp/>dash<sp/>in<sp/>the<sp/>name.<sp/>Corner<sp/>case<sp/>large<sp/>positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1aa346b938ba595340170d82adb6728c5c" kindref="member">TEST_CLASS_LARGE_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>name);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="class_test_class_1aa8eb54e569c7b82eddb4faa1c84b5434" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>check_try_catch_getNumber(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>number);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="class_test_class_1aa030f38a05c8b80ee00ee0867b5f0177" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_getNumber()</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>invalid_name<sp/>=<sp/><ref refid="test__my__class_8cpp_1ae4f2604a8d4d27c8777eb73888962f20" kindref="member">TEST_CLASS_INVALID_STRING</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UTs:<sp/>Invalid<sp/>string<sp/>for<sp/>student&apos;s<sp/>name<sp/>and<sp/>valid<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>invalid_name);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a8d4311a74377b01718a34f01d9abff5a" kindref="member">TEST_CLASS_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>invalid_name);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1aa346b938ba595340170d82adb6728c5c" kindref="member">TEST_CLASS_LARGE_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>invalid_name);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a499b5f8b1de5adf6c8f5dcfc4e029e78" kindref="member">TEST_CLASS_LARGE_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>invalid_name);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a21b8cfa5a18537c6aef7708e2a9e6487" kindref="member">TEST_CLASS_NOT_THAT_LARGE_POS_INT</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>invalid_name);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1ab32e1cdc7c0f819a550949197a24c927" kindref="member">TEST_CLASS_NOT_THAT_LARGE_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>check_try_catch_getNumber(number,<sp/>invalid_name);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>are<sp/>going<sp/>to<sp/>check<sp/>with<sp/>just<sp/>one<sp/>of<sp/>the<sp/>valid<sp/>strings<sp/>for<sp/>student&apos;s<sp/>name,<sp/>because<sp/>we<sp/>will<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//know<sp/>if<sp/>they<sp/>work<sp/>correctly<sp/>from<sp/>the<sp/>GOOD<sp/>case<sp/>scenario.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/>name.clear();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>positive<sp/>double<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>double_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a97c24a136dc8132fefff4fc8dde6d1c9" kindref="member">TEST_CLASS_POSITIVE_DOUBLE</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>double_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(double_number,<sp/>name);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>double_number);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>negative<sp/>double<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>double_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1ad2994a78569917b8170028fb5cf19d47" kindref="member">TEST_CLASS_NEGATIVE_DOUBLE</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>double_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(double_number,<sp/>name);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>double_number);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>positive<sp/>float<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>float_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1ab855b8c59d654e7ef48e07cdd9ff8c77" kindref="member">TEST_CLASS_POSITIVE_FLOAT</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>float_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(float_number,<sp/>name);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>float_number);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>negative<sp/>float<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/>float_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a1e43356f8390fbf53adf28e6d8ea32e1" kindref="member">TEST_CLASS_NEGATIVE_FLOAT</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>float_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(float_number,<sp/>name);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>float_number);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>letter<sp/>char<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>character<sp/>=<sp/><ref refid="test__my__class_8cpp_1a0e0c5bcf70aa9ea616f1743de4dea049" kindref="member">TEST_CLASS_CHAR_LETTER</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>character<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(character,<sp/>name);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>character);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>symbol<sp/>char<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/>character<sp/>=<sp/><ref refid="test__my__class_8cpp_1ada700fb90c41c3eac4ba7f68231de9b9" kindref="member">TEST_CLASS_CHAR_SYMBOL</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>character<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(character,<sp/>name);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>character);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>digit<sp/>char<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>character<sp/>=<sp/><ref refid="test__my__class_8cpp_1a6d0027f40f01caacde7c235656bffecb" kindref="member">TEST_CLASS_CHAR_NUMBER</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>character<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(character,<sp/>name);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>character);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>int<sp/>overflow<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_value<sp/>=<sp/><ref refid="test__my__class_8cpp_1a84adeb82ceca95387cc5ed5f36e83a0d" kindref="member">TEST_CLASS_UNSIGNED_LONG_LONG_INT</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_value<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(max_value,<sp/>name);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>max_value);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>name<sp/>and<sp/>int<sp/>underflow<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_value<sp/>=<sp/><ref refid="test__my__class_8cpp_1a2336ba2a2f2284aa6bede29ef76ade9e" kindref="member">TEST_CLASS_LONG_LONG_INT_NEGATIVE</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>min_value<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(min_value,<sp/>name);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>min_value);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="class_test_class_1afb9755c703e20757d036f2f704515392" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_getName()</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::getName()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/>test_valid_getName();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>test_invalid_getName();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="class_test_class_1a5220911e29eaf6083958229f540e095b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>check_getName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ac60ff0fd8505a01c7a929abe49e91334" kindref="member">getName</ref>()<sp/>==<sp/>name);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="class_test_class_1aa3f746240e971dbd4ca997e0ff565dd4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_getName()</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Here<sp/>the<sp/>student&apos;s<sp/>number<sp/>doesn&apos;t<sp/>matter<sp/>so<sp/>we<sp/>are<sp/>going<sp/>to<sp/>use<sp/>just<sp/>TEST_CLASS_POSITIVE_INT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>number<sp/>for<sp/>student&apos;s<sp/>number.<sp/>Valid<sp/>string<sp/>without<sp/>dash.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>check_getName(number,<sp/>name);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>number<sp/>for<sp/>student&apos;s<sp/>number.<sp/>Valid<sp/>string<sp/>with<sp/>dash.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/>name.clear();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1a722bf56e11fd344438ab4facc3990c84" kindref="member">TEST_CLASS_VALID_STRING_DASH</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/>check_getName(number,<sp/>name);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>number<sp/>for<sp/>student&apos;s<sp/>number.<sp/>Valid<sp/>char<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/>name.clear();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1a0e0c5bcf70aa9ea616f1743de4dea049" kindref="member">TEST_CLASS_CHAR_LETTER</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>check_getName(number,<sp/>name);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="class_test_class_1af8c3e3d546e53b0aefa473a55cf8de9c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_getName()</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Here<sp/>the<sp/>student&apos;s<sp/>number<sp/>doesn&apos;t<sp/>matter<sp/>so<sp/>we<sp/>are<sp/>going<sp/>to<sp/>use<sp/>just<sp/>TEST_CLASS_POSITIVE_INT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>number<sp/>for<sp/>student&apos;s<sp/>number.<sp/>Invalid<sp/>string<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1ae4f2604a8d4d27c8777eb73888962f20" kindref="member">TEST_CLASS_INVALID_STRING</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>check_getName(number,<sp/>name);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>number<sp/>for<sp/>student&apos;s<sp/>number.<sp/>Invalid<sp/>char<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/>name.clear();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1a6d0027f40f01caacde7c235656bffecb" kindref="member">TEST_CLASS_CHAR_NUMBER</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/>check_getName(number,<sp/>name);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Valid<sp/>number<sp/>for<sp/>student&apos;s<sp/>number.<sp/>Invalid<sp/>char<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/>name.clear();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1ada700fb90c41c3eac4ba7f68231de9b9" kindref="member">TEST_CLASS_CHAR_SYMBOL</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>check_getName(number,<sp/>name);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="class_test_class_1a4f999d196c8a0aa5da1e3f16d4b773ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_setNumber()</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::setNumber()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/>test_valid_setNumber();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/>test_invalid_setNumber();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="class_test_class_1abc94be115d46abbe7582b233a294bfce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>check_setNumber(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_number)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>new<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>new_number<sp/>&lt;&lt;</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_student.<ref refid="classstudent_1aa5656a3bae199b4707ca72d22c9f3298" kindref="member">setNumber</ref>(new_number);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ae378080083989197920381b03fd91dbd" kindref="member">getNumber</ref>()<sp/>==<sp/>new_number);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="class_test_class_1a99b9f14083e34cbdbe07040bb8dc7279" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_setNumber()</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>a<sp/>valid<sp/>positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/>check_setNumber(number);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>a<sp/>valid<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a8d4311a74377b01718a34f01d9abff5a" kindref="member">TEST_CLASS_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/>check_setNumber(number);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>a<sp/>valid<sp/>not<sp/>that<sp/>large<sp/>positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a21b8cfa5a18537c6aef7708e2a9e6487" kindref="member">TEST_CLASS_NOT_THAT_LARGE_POS_INT</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/>check_setNumber(number);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>a<sp/>valid<sp/>not<sp/>that<sp/>large<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1ab32e1cdc7c0f819a550949197a24c927" kindref="member">TEST_CLASS_NOT_THAT_LARGE_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/>check_setNumber(number);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>a<sp/>valid<sp/>large<sp/>positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1aa346b938ba595340170d82adb6728c5c" kindref="member">TEST_CLASS_LARGE_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/>check_setNumber(number);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>a<sp/>valid<sp/>large<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a499b5f8b1de5adf6c8f5dcfc4e029e78" kindref="member">TEST_CLASS_LARGE_NEGATIVE_INT</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/>check_setNumber(number);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="class_test_class_1a4e70e9bb23c42c76f6b51094d94af7b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_setNumber()</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>an<sp/>invalid<sp/>positive<sp/>double<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>double_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a97c24a136dc8132fefff4fc8dde6d1c9" kindref="member">TEST_CLASS_POSITIVE_DOUBLE</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>double_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)double_number);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>an<sp/>invalid<sp/>negative<sp/>double<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/>double_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1ad2994a78569917b8170028fb5cf19d47" kindref="member">TEST_CLASS_NEGATIVE_DOUBLE</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>double_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)double_number);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>an<sp/>invalid<sp/>positive<sp/>float<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>float_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1ab855b8c59d654e7ef48e07cdd9ff8c77" kindref="member">TEST_CLASS_POSITIVE_FLOAT</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>float_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)float_number);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>a<sp/>valid<sp/>not<sp/>that<sp/>large<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/>float_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a1e43356f8390fbf53adf28e6d8ea32e1" kindref="member">TEST_CLASS_NEGATIVE_FLOAT</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>float_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)float_number);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>an<sp/>invalid<sp/>large<sp/>positive<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a84adeb82ceca95387cc5ed5f36e83a0d" kindref="member">TEST_CLASS_UNSIGNED_LONG_LONG_INT</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)max_number);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>an<sp/>invalid<sp/>large<sp/>negative<sp/>int<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a2336ba2a2f2284aa6bede29ef76ade9e" kindref="member">TEST_CLASS_LONG_LONG_INT_NEGATIVE</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>min_number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)min_number);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Setting<sp/>an<sp/>invalid<sp/>char<sp/>for<sp/>student&apos;s<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>symbol<sp/>=<sp/><ref refid="test__my__class_8cpp_1a0e0c5bcf70aa9ea616f1743de4dea049" kindref="member">TEST_CLASS_CHAR_LETTER</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>symbol<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)symbol);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/>symbol<sp/>=<sp/><ref refid="test__my__class_8cpp_1a6d0027f40f01caacde7c235656bffecb" kindref="member">TEST_CLASS_CHAR_NUMBER</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>symbol<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)symbol);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/>symbol<sp/>=<sp/><ref refid="test__my__class_8cpp_1ada700fb90c41c3eac4ba7f68231de9b9" kindref="member">TEST_CLASS_CHAR_SYMBOL</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>for<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>symbol<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/>check_setNumber((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)symbol);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="class_test_class_1aafc888ca6e42adec762d1419507962e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_setName()</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::setName()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/>test_valid_setName();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/>test_invalid_setName();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="class_test_class_1a21faf8377ce1d26285d1d18eb53fc5ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_setName()</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>new_name;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>with<sp/>a<sp/>valid<sp/>string<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>new_name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/>check_setName(new_name);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>with<sp/>a<sp/>valid<sp/>string<sp/>with<sp/>dash<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/>new_name<sp/>=<sp/><ref refid="test__my__class_8cpp_1a722bf56e11fd344438ab4facc3990c84" kindref="member">TEST_CLASS_VALID_STRING_DASH</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/>check_setName(new_name);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>with<sp/>a<sp/>valid<sp/>char<sp/>letter<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/>new_name<sp/>=<sp/><ref refid="test__my__class_8cpp_1a0e0c5bcf70aa9ea616f1743de4dea049" kindref="member">TEST_CLASS_CHAR_LETTER</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/>check_setName(new_name);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="class_test_class_1af58b4f2a4bd4e275cd7d442a6d577ac6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_setName()</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>invalid_new_name;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>with<sp/>invalid<sp/>string<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/>invalid_new_name<sp/>=<sp/><ref refid="test__my__class_8cpp_1ae4f2604a8d4d27c8777eb73888962f20" kindref="member">TEST_CLASS_INVALID_STRING</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/>check_setName(invalid_new_name);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>with<sp/>invalid<sp/>char<sp/>symbol<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/>invalid_new_name<sp/>=<sp/><ref refid="test__my__class_8cpp_1ada700fb90c41c3eac4ba7f68231de9b9" kindref="member">TEST_CLASS_CHAR_SYMBOL</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/>check_setName(invalid_new_name);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>with<sp/>invalid<sp/>numerical<sp/>char<sp/>for<sp/>student&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/>invalid_new_name<sp/>=<sp/><ref refid="test__my__class_8cpp_1a6d0027f40f01caacde7c235656bffecb" kindref="member">TEST_CLASS_CHAR_NUMBER</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/>check_setName(invalid_new_name);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="class_test_class_1a8849cbe2d80fc994d137a25b7689ea78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>check_setName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>new_name)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>student&apos;s<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>new<sp/>student&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>new_name<sp/>&lt;&lt;</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_student.<ref refid="classstudent_1a64d0ed3d4c97f02d2915e181eab4d85f" kindref="member">setName</ref>(new_name);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1ac60ff0fd8505a01c7a929abe49e91334" kindref="member">getName</ref>()<sp/>==<sp/>new_name);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="class_test_class_1a160cc248df643477304eea8252339e17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_addNewGrade()</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::addNewGrade()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/>test_valid_addNewGrade();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/>test_invalid_addNewGrade();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="class_test_class_1a1be405fb18449c3872587853f9a52e57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_addNewGrade()</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Trying<sp/>to<sp/>add<sp/>a<sp/>float<sp/>grade,<sp/>which<sp/>is<sp/>in<sp/>the<sp/>right<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>test_student.<ref refid="classstudent_1aeb0bd465659ab78523d480c3dbdb91c4" kindref="member">getNumberGrades</ref>();<sp/>i<sp/>&lt;<sp/><ref refid="my__class_8h_1a6a68cbead10ddb7453cd17e368acc55e" kindref="member">MAX_GRADES</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_grade<sp/>=<sp/><ref refid="my__class_8h_1a9266bbaee8536bb3af5cd9557ba27871" kindref="member">LOWEST_GRADE</ref><sp/>+<sp/>(rand()/(RAND_MAX<sp/>/<sp/>(<ref refid="my__class_8h_1a888557700c666956fe79990e5d81b6f5" kindref="member">HIGHEST_GRADE</ref><sp/>-<sp/><ref refid="my__class_8h_1a9266bbaee8536bb3af5cd9557ba27871" kindref="member">LOWEST_GRADE</ref>)));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>new_grade);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="class_test_class_1a51a2c92494f26f7c449ca55c0a33ac4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_addNewGrade()</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Trying<sp/>to<sp/>add<sp/>a<sp/>numerical<sp/>char<sp/>for<sp/>grade.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>symbol<sp/>=<sp/><ref refid="test__my__class_8cpp_1a6d0027f40f01caacde7c235656bffecb" kindref="member">TEST_CLASS_CHAR_NUMBER</ref>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>add<sp/>as<sp/>a<sp/>grade<sp/>the<sp/>symbol:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>symbol<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>symbol);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Trying<sp/>to<sp/>add<sp/>an<sp/>alphabetical<sp/>char<sp/>for<sp/>grade.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/>symbol<sp/>=<sp/><ref refid="test__my__class_8cpp_1a0e0c5bcf70aa9ea616f1743de4dea049" kindref="member">TEST_CLASS_CHAR_LETTER</ref>;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>add<sp/>as<sp/>a<sp/>grade<sp/>the<sp/>symbol:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>symbol<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>symbol);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Trying<sp/>to<sp/>add<sp/>a<sp/>char<sp/>for<sp/>grade.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/>symbol<sp/>=<sp/><ref refid="test__my__class_8cpp_1ada700fb90c41c3eac4ba7f68231de9b9" kindref="member">TEST_CLASS_CHAR_SYMBOL</ref>;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>add<sp/>as<sp/>a<sp/>grade<sp/>the<sp/>symbol:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>symbol<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>symbol);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Trying<sp/>to<sp/>add<sp/>a<sp/>grade<sp/>out<sp/>of<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_grade<sp/>=<sp/><ref refid="test__my__class_8cpp_1a4543514127209ca87261a34e523e6184" kindref="member">TEST_CLASS_BIG_POSITIVE_FLOAT</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>add<sp/>as<sp/>a<sp/>grade<sp/>one,<sp/>which<sp/>is<sp/>too<sp/>high:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>new_grade<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>new_grade);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Trying<sp/>to<sp/>add<sp/>a<sp/>grade<sp/>out<sp/>of<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/>new_grade<sp/>=<sp/><ref refid="test__my__class_8cpp_1a1e43356f8390fbf53adf28e6d8ea32e1" kindref="member">TEST_CLASS_NEGATIVE_FLOAT</ref>;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>add<sp/>as<sp/>a<sp/>grade<sp/>one,<sp/>which<sp/>is<sp/>too<sp/>low:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>new_grade<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>new_grade);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Trying<sp/>to<sp/>add<sp/>too<sp/>many<sp/>grades.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>test_student.<ref refid="classstudent_1aeb0bd465659ab78523d480c3dbdb91c4" kindref="member">getNumberGrades</ref>();<sp/>i<sp/>&lt;=<sp/><ref refid="my__class_8h_1a6a68cbead10ddb7453cd17e368acc55e" kindref="member">MAX_GRADES</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_grade<sp/>=<sp/><ref refid="my__class_8h_1a9266bbaee8536bb3af5cd9557ba27871" kindref="member">LOWEST_GRADE</ref><sp/>+<sp/>(rand()/(RAND_MAX<sp/>/<sp/>(<ref refid="my__class_8h_1a888557700c666956fe79990e5d81b6f5" kindref="member">HIGHEST_GRADE</ref><sp/>-<sp/><ref refid="my__class_8h_1a9266bbaee8536bb3af5cd9557ba27871" kindref="member">LOWEST_GRADE</ref>)));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>new_grade);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="class_test_class_1a4386e8c4061b3c0192fd52f6699780d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>check_addNewGrade(<ref refid="classstudent" kindref="compound">student</ref>&amp;<sp/>test_student,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_grade)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_grades_received<sp/>=<sp/>test_student.<ref refid="classstudent_1aeb0bd465659ab78523d480c3dbdb91c4" kindref="member">getNumberGrades</ref>();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>add<sp/>a<sp/>new<sp/>grade:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>new_grade<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_student.<ref refid="classstudent_1ae4a42aae88371da3d7a2a045546c55f5" kindref="member">addNewGrade</ref>(new_grade);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1aeb0bd465659ab78523d480c3dbdb91c4" kindref="member">getNumberGrades</ref>()<sp/>==<sp/>(count_grades_received<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>e)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::length_error&amp;<sp/>e1)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e1.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603" refid="class_test_class_1a3e5dd2e82e2205841f63f2a822c749b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_getAverageGrade()</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::getAverageGrade()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/>test_valid_getAverageGrade();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/>test_invalid_getAverageGrade();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617" refid="class_test_class_1a5bce40ccf7736fbc388a88b45ecc837a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_getAverageGrade()</highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/>grades.clear();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/>grades<sp/>=<sp/>{2,<sp/>2.5,<sp/>4.45,<sp/>6.00,<sp/>3.8,<sp/>5.6,<sp/>5.5,<sp/>7};</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/>std::random_shuffle(grades.begin(),<sp/>grades.end());</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg_grade{};</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avg_grade<sp/>=<sp/>calculate_average(grades);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::logic_error&amp;<sp/>e)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Check<sp/>if<sp/>getAverageGrade<sp/>calculates<sp/>correctly<sp/>the<sp/>average<sp/>of<sp/>all<sp/>the<sp/>grades<sp/>of<sp/>a<sp/>student,<sp/>when<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//they<sp/>are<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>grade<sp/>:<sp/>grades)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>grade);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1a50faf390a6cdd2620af4548d48325116" kindref="member">getAverageGrade</ref>()<sp/>==<sp/>avg_grade);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::logic_error&amp;<sp/>e)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="class_test_class_1a0006f0a28764ef0cde04ca173650cc77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>calculate_average(std::vector&lt;float&gt;&amp;<sp/>grades)</highlight></codeline>
<codeline lineno="653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum{};</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count{};</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>grade<sp/>:<sp/>grades)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(grade<sp/>&gt;=<sp/><ref refid="my__class_8h_1a9266bbaee8536bb3af5cd9557ba27871" kindref="member">LOWEST_GRADE</ref><sp/>&amp;&amp;<sp/>grade<sp/>&lt;=<sp/><ref refid="my__class_8h_1a888557700c666956fe79990e5d81b6f5" kindref="member">HIGHEST_GRADE</ref>)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>grade;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;There<sp/>should<sp/>be<sp/>grades<sp/>in<sp/>order<sp/>to<sp/>calculate<sp/>their<sp/>average.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sum/count);</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="class_test_class_1a004fba1a5acbd0fa124423991cdbecc6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_getAverageGrade()</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg_grade{};</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Trying<sp/>to<sp/>get<sp/>the<sp/>average<sp/>for<sp/>a<sp/>student<sp/>without<sp/>any<sp/>grades.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>calculate<sp/>the<sp/>average<sp/>for<sp/>a<sp/>student<sp/>without<sp/>any<sp/>grades.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref><sp/>(test_student.<ref refid="classstudent_1a50faf390a6cdd2620af4548d48325116" kindref="member">getAverageGrade</ref>()<sp/>==<sp/>avg_grade);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::logic_error&amp;<sp/>e)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691" refid="class_test_class_1acb6a86dccf2a6b72de6984a50fa815c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_getMaxGrade()</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::getMaxGrade()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/>test_valid_getMaxGrade();</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/>test_invalid_getMaxGrade();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705" refid="class_test_class_1ad1018f29c78f7ec47a8c923b848a1495" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>fill_with_random_grades(<ref refid="classstudent" kindref="compound">student</ref>&amp;<sp/>test_student)</highlight></codeline>
<codeline lineno="706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/>grades.clear();</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>1<sp/>+<sp/>(rand()<sp/>/<sp/>(RAND_MAX<sp/>/<sp/>(<ref refid="my__class_8h_1a6a68cbead10ddb7453cd17e368acc55e" kindref="member">MAX_GRADES</ref><sp/>-<sp/>1)));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>test_student.<ref refid="classstudent_1aeb0bd465659ab78523d480c3dbdb91c4" kindref="member">getNumberGrades</ref>();<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_grade<sp/>=<sp/><ref refid="my__class_8h_1a9266bbaee8536bb3af5cd9557ba27871" kindref="member">LOWEST_GRADE</ref><sp/>+<sp/>(rand()/(RAND_MAX<sp/>/<sp/>(<ref refid="my__class_8h_1a888557700c666956fe79990e5d81b6f5" kindref="member">HIGHEST_GRADE</ref><sp/>-<sp/><ref refid="my__class_8h_1a9266bbaee8536bb3af5cd9557ba27871" kindref="member">LOWEST_GRADE</ref>)));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_addNewGrade(test_student,<sp/>new_grade);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grades.push_back(new_grade);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717" refid="class_test_class_1a865aecb24079358f3c4caaae4c82f2bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_getMaxGrade()</highlight></codeline>
<codeline lineno="718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>if<sp/>getMaxGrade<sp/>works<sp/>for<sp/>student<sp/>who<sp/>has<sp/>at<sp/>least<sp/>1<sp/>grade.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>will<sp/>get<sp/>random<sp/>number<sp/>of<sp/>grades<sp/>and<sp/>random<sp/>grades<sp/>in<sp/>the<sp/>wanted<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/>fill_with_random_grades(test_student);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>maximum<sp/>grade<sp/>when<sp/>there<sp/>is<sp/>at<sp/>least<sp/>1<sp/>grade.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1a5b8d5fb4e7808bf944784fee64163017" kindref="member">getMaxGrade</ref>()<sp/>==<sp/>*(std::max_element(grades.begin(),<sp/>grades.end())));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::logic_error&amp;<sp/>e)</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737" refid="class_test_class_1a3be3e0d4dfd31fbf8815911ccd6677de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_getMaxGrade()</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>if<sp/>getMaxGrade<sp/>works<sp/>for<sp/>student<sp/>who<sp/>has<sp/>no<sp/>grades.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/>grades.clear();</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>maximum<sp/>element,<sp/>when<sp/>no<sp/>grades<sp/>are<sp/>present.<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1a5b8d5fb4e7808bf944784fee64163017" kindref="member">getMaxGrade</ref>()<sp/>==<sp/>*(std::max_element(grades.begin(),<sp/>grades.end())));</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::logic_error&amp;<sp/>e)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="class_test_class_1ac5ae467fa892e345b59517b7be11741b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_getMinGrade()</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::getMinGrade()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/>test_valid_getMinGrade();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/>test_invalid_getMinGrade();</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="class_test_class_1a77b1e67cf0fd08474cf36ebb58a5ae96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_getMinGrade()</highlight></codeline>
<codeline lineno="771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>if<sp/>getMinGrade<sp/>works<sp/>for<sp/>student<sp/>who<sp/>has<sp/>at<sp/>least<sp/>1<sp/>grade.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>will<sp/>get<sp/>random<sp/>number<sp/>of<sp/>grades<sp/>and<sp/>random<sp/>grades<sp/>in<sp/>the<sp/>wanted<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/>fill_with_random_grades(test_student);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>minimum<sp/>grade<sp/>when<sp/>there<sp/>is<sp/>at<sp/>least<sp/>1<sp/>grade.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1a8c23a42b02e472eab631d8a1485fc7b1" kindref="member">getMinGrade</ref>()<sp/>==<sp/>*(std::min_element(grades.begin(),<sp/>grades.end())));</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::logic_error&amp;<sp/>e)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790" refid="class_test_class_1abcc1dc08418b6442972dce609f7b0baa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_getMinGrade()</highlight></codeline>
<codeline lineno="791"><highlight class="normal">{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Testing<sp/>if<sp/>getMinGrade<sp/>works<sp/>for<sp/>student<sp/>who<sp/>has<sp/>no<sp/>grades.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/>grades.clear();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>minimum<sp/>element,<sp/>when<sp/>no<sp/>grades<sp/>are<sp/>present.<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(test_student.<ref refid="classstudent_1a8c23a42b02e472eab631d8a1485fc7b1" kindref="member">getMinGrade</ref>()<sp/>==<sp/>*(std::min_element(grades.begin(),<sp/>grades.end())));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::logic_error&amp;<sp/>e)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809" refid="class_test_class_1a38edab9e106cf75180805eb092feb9c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_getGrades()</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>student::getGrades()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>GOOD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/>test_valid_getGrades();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>BAD<sp/>weather<sp/>scenario.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;START...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/>test_invalid_getGrades();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823" refid="class_test_class_1ace77fb00ebaebd507b054de203970c46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_valid_getGrades()</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<sp/><ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>We<sp/>will<sp/>check<sp/>if<sp/>the<sp/>vector<sp/>grades<sp/>of<sp/>the<sp/>student<sp/>class<sp/>keeps<sp/>the<sp/>right<sp/>grades<sp/>in<sp/>the<sp/>right<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/>fill_with_random_grades(test_student);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/>check_are_received_grades_the_same(test_student,<sp/>grades);</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="class_test_class_1a6e0c6406c513975c15c681592a40f29b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>test_invalid_getGrades()</highlight></codeline>
<codeline lineno="835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="test__my__class_8cpp_1accacf6db90d038b53d83e9dd24af7645" kindref="member">TEST_CLASS_VALID_STRING</ref>;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/>number<sp/>=<ref refid="test__my__class_8cpp_1a7027395f6b75ff8d6a0b6c23bdce3d59" kindref="member">TEST_CLASS_POSITIVE_INT</ref>;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><ref refid="classstudent" kindref="compound">student</ref><sp/>test_student(number,<sp/>name);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//UT:<sp/>Check<sp/>when<sp/>no<sp/>grades<sp/>are<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/>grades.clear();</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/>check_are_received_grades_the_same(test_student,<sp/>grades);</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="class_test_class_1a06cdd6c8f5e4b7622d235597ed0997bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestClass<sp/>::<sp/>check_are_received_grades_the_same(<ref refid="classstudent" kindref="compound">student</ref>&amp;<sp/>test_student,<sp/>std::vector&lt;float&gt;&amp;<sp/>temp_grades)</highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>if<sp/>the<sp/>student<sp/>has<sp/>the<sp/>same<sp/>amount<sp/>of<sp/>grades<sp/>as<sp/>we<sp/>keep<sp/>in<sp/>the<sp/>vector.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(temp_grades.size()<sp/>==<sp/>test_student.<ref refid="classstudent_1aeb0bd465659ab78523d480c3dbdb91c4" kindref="member">getNumberGrades</ref>());</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Comparing<sp/>each<sp/>grade...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_grades.size();<sp/>++i)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//getGrades<sp/>is<sp/>printing<sp/>the<sp/>student&apos;s<sp/>grades.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>student_grade<sp/>=<sp/>test_student.<ref refid="classstudent_1afb9505bad4424cd24c1c9c6ed9a8ae6b" kindref="member">getGrades</ref>()[i];</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Comparing:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>temp_grades[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>student_grade<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__my__class_8cpp_1ab77e07f639edd98b5a62e3491ed487a3" kindref="member">IS_TRUE</ref>(temp_grades[i]<sp/>==<sp/>student_grade);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859" refid="test__my__class_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__my__class_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="860"><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_test_class" kindref="compound">TestClass</ref><sp/>myTest;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1ac7022e0ec096e0c93103acde04be3c74" kindref="member">test_getNumber</ref>();</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1afb9755c703e20757d036f2f704515392" kindref="member">test_getName</ref>();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1a4f999d196c8a0aa5da1e3f16d4b773ea" kindref="member">test_setNumber</ref>();</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1aafc888ca6e42adec762d1419507962e6" kindref="member">test_setName</ref>();</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1a160cc248df643477304eea8252339e17" kindref="member">test_addNewGrade</ref>();</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1a3e5dd2e82e2205841f63f2a822c749b8" kindref="member">test_getAverageGrade</ref>();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1acb6a86dccf2a6b72de6984a50fa815c5" kindref="member">test_getMaxGrade</ref>();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1ac5ae467fa892e345b59517b7be11741b" kindref="member">test_getMinGrade</ref>();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/>myTest.<ref refid="class_test_class_1a38edab9e106cf75180805eb092feb9c5" kindref="member">test_getGrades</ref>();</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="test_my_class.cpp"/>
  </compounddef>
</doxygen>
